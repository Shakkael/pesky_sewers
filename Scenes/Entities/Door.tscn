[gd_scene load_steps=12 format=2]

[ext_resource path="res://Imgs/door.jpg" type="Texture" id=1]
[ext_resource path="res://Scenes/Meshes/WoodenDoor.tres" type="CubeMesh" id=2]
[ext_resource path="res://Scripts/Entities/Door.gd" type="Script" id=3]
[ext_resource path="res://Scripts/Shaders/psx.shader" type="Shader" id=4]
[ext_resource path="res://Models/Props/Kitchen/Knob.tres" type="Material" id=5]
[ext_resource path="res://Models/Props/Outside/metal.jpg" type="Texture" id=6]

[sub_resource type="ShaderMaterial" id=1]
shader = ExtResource( 4 )
shader_param/snapRes = 8.0
shader_param/roughness = 1.0
shader_param/specular = 0.1
shader_param/uv_scale = Vector2( 1, 0.8 )
shader_param/uv_offset = Vector2( 0, 0 )
shader_param/light_intensity = 0.3
shader_param/transparent = false
shader_param/albedoTex = ExtResource( 1 )

[sub_resource type="BoxShape" id=2]
extents = Vector3( 2, 3, 0.1 )

[sub_resource type="SphereMesh" id=3]
radius = 0.2
height = 0.4
radial_segments = 8
rings = 8

[sub_resource type="Shader" id=4]
code = "shader_type spatial; 
render_mode skip_vertex_transform, diffuse_burley; 

//Albedo texture 
uniform sampler2D albedoTex : hint_albedo; //Geometric resolution for vert sna[ 
uniform float snapRes = 8.0; 
uniform float roughness = 1.0;
uniform float specular = 0.1;
uniform vec2 uv_scale = vec2(1.0, 1.0);
uniform vec2 uv_offset = vec2(.0, .0);
//Controls the how much light it recieves
uniform float light_intensity = 0.3;

// For transparent textures
uniform bool transparent = false;

// cull mode disabled

//vec4 for UV recalculation 
varying vec4 vertCoord; 
void vertex() { 
	UV = UV * uv_scale + uv_offset;
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz; 
	VERTEX.xyz = floor(VERTEX.xyz * snapRes) / snapRes; 
	vertCoord = vec4(UV * VERTEX.x, VERTEX.z, 0); 
} 
void fragment() { 
	
	ROUGHNESS =roughness;
	SPECULAR = specular;
	ALBEDO = texture(albedoTex, UV).rgb; 
	ALPHA = sin(3.0*TIME)/3.0+0.45;
	
	
	//Check if the texture is transparent
	if (transparent == true){
		// alpha value less than user-specified threshold 0.0?
		if (texture(albedoTex, UV).a <= 0.0)
        
    	{
        	discard; // yes: discard this fragment
    	}	
		
	}
	
	
	}
//QUICK FIX TO LIGHTING
void light()
{
	
	DIFFUSE_LIGHT = ALBEDO*LIGHT_COLOR*ATTENUATION*light_intensity;

}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/snapRes = 8.0
shader_param/roughness = 1.0
shader_param/specular = 0.1
shader_param/uv_scale = Vector2( 1, 1 )
shader_param/uv_offset = Vector2( 0, 0 )
shader_param/light_intensity = 0.3
shader_param/transparent = true
shader_param/albedoTex = ExtResource( 6 )

[node name="Door" type="StaticBody"]
collision_layer = 3
collision_mask = 3
script = ExtResource( 3 )

[node name="CSGMesh" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, -1, 0 )
mesh = ExtResource( 2 )
material = SubResource( 1 )

[node name="CollisionShape" type="CollisionShape" parent="."]
shape = SubResource( 2 )

[node name="Position" type="Position3D" parent="."]
transform = Transform( -1, 0, -3.25841e-07, 0, 1, 0, 3.25841e-07, 0, -1, 0, -0.45, 3 )

[node name="Knob" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, -1, 0.2 )
mesh = SubResource( 3 )
material = ExtResource( 5 )

[node name="KnobLack" type="CSGMesh" parent="."]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, -1, 0.2 )
visible = false
mesh = SubResource( 3 )
material = SubResource( 5 )
