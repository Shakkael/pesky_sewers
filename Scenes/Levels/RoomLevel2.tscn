[gd_scene load_steps=23 format=2]

[ext_resource path="res://Scripts/Levels/RoomLevel2.gd" type="Script" id=1]
[ext_resource path="res://Imgs/floor.jpg" type="Texture" id=2]
[ext_resource path="res://Scenes/Props/Kitchen/Glass.tscn" type="PackedScene" id=3]
[ext_resource path="res://Scenes/Entities/Door.tscn" type="PackedScene" id=4]
[ext_resource path="res://Imgs/ceiling.jpg" type="Texture" id=5]
[ext_resource path="res://Imgs/wall.jpg" type="Texture" id=6]
[ext_resource path="res://Scenes/Props/Kitchen/Table.tscn" type="PackedScene" id=7]
[ext_resource path="res://Scenes/Props/Outside/BarrelBroken.tscn" type="PackedScene" id=8]
[ext_resource path="res://Scenes/Props/Outside/Barrel2.tscn" type="PackedScene" id=9]
[ext_resource path="res://Scenes/Props/Wardrobes/WardrobeEmpty.tscn" type="PackedScene" id=10]
[ext_resource path="res://Scenes/Props/Outside/OxygenTank.tscn" type="PackedScene" id=11]
[ext_resource path="res://Scenes/Entities/Knob.tscn" type="PackedScene" id=12]
[ext_resource path="res://Scenes/Entities/Creature.tscn" type="PackedScene" id=13]

[sub_resource type="Shader" id=1]
code = "shader_type spatial; 
render_mode skip_vertex_transform, diffuse_burley; 

//Albedo texture 
uniform sampler2D albedoTex : hint_albedo; //Geometric resolution for vert sna[ 
uniform float snapRes = 8.0; 
uniform float roughness = 1.0;
uniform float specular = 0.1;
uniform vec2 uv_scale = vec2(1.0, 1.0);
uniform vec2 uv_offset = vec2(.0, .0);
//Controls the how much light it recieves
uniform float light_intensity = 0.3;

// For transparent textures
uniform bool transparent = false;

// cull mode disabled

//vec4 for UV recalculation 
varying vec4 vertCoord; 
void vertex() { 
	UV = UV * uv_scale + uv_offset;
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz; 
	VERTEX.xyz = floor(VERTEX.xyz * snapRes) / snapRes; 
	vertCoord = vec4(UV * VERTEX.x, VERTEX.z, 0); 
} 
void fragment() { 
	
	ROUGHNESS =roughness;
	SPECULAR = specular;
	ALBEDO = texture(albedoTex, UV).rgb; 
	
	
	//Check if the texture is transparent
	if (transparent == true){
		// alpha value less than user-specified threshold 0.0?
		if (texture(albedoTex, UV).a <= 0.0)
        
    	{
        	discard; // yes: discard this fragment
    	}	
		
	}
	
	
	}
//QUICK FIX TO LIGHTING
void light()
{
	
	DIFFUSE_LIGHT = ALBEDO*LIGHT_COLOR*ATTENUATION*light_intensity;

}"

[sub_resource type="ShaderMaterial" id=2]
shader = SubResource( 1 )
shader_param/snapRes = 8.0
shader_param/roughness = 1.0
shader_param/specular = 0.1
shader_param/uv_scale = Vector2( 1, 1 )
shader_param/uv_offset = Vector2( 0, 0 )
shader_param/light_intensity = 0.3
shader_param/transparent = false
shader_param/albedoTex = ExtResource( 2 )

[sub_resource type="PlaneMesh" id=3]
material = SubResource( 2 )
size = Vector2( 30, 30 )

[sub_resource type="ShaderMaterial" id=4]
shader = SubResource( 1 )
shader_param/snapRes = 8.0
shader_param/roughness = 1.0
shader_param/specular = 0.1
shader_param/uv_scale = Vector2( 1, 1 )
shader_param/uv_offset = Vector2( 0, 0 )
shader_param/light_intensity = 0.3
shader_param/transparent = false
shader_param/albedoTex = ExtResource( 5 )

[sub_resource type="Shader" id=5]
code = "shader_type spatial; 
render_mode skip_vertex_transform, diffuse_burley, cull_disabled; 

//Albedo texture 
uniform sampler2D albedoTex : hint_albedo; //Geometric resolution for vert sna[ 
uniform float snapRes = 8.0; 
uniform float roughness = 1.0;
uniform float specular = 0.1;
uniform vec2 uv_scale = vec2(1.0, 1.0);
uniform vec2 uv_offset = vec2(.0, .0);
//Controls the how much light it recieves
uniform float light_intensity = 0.3;

// For transparent textures
uniform bool transparent = false;

// cull mode disabled

//vec4 for UV recalculation 
varying vec4 vertCoord; 
void vertex() { 
	UV = UV * uv_scale + uv_offset;
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz; 
	VERTEX.xyz = floor(VERTEX.xyz * snapRes) / snapRes; 
	vertCoord = vec4(UV * VERTEX.x, VERTEX.z, 0); 
} 
void fragment() { 
	
	ROUGHNESS =roughness;
	SPECULAR = specular;
	ALBEDO = texture(albedoTex, UV).rgb; 
	
	
	//Check if the texture is transparent
	if (transparent == true){
		// alpha value less than user-specified threshold 0.0?
		if (texture(albedoTex, UV).a <= 0.0)
        
    	{
        	discard; // yes: discard this fragment
    	}	
		
	}
	
	
	}
//QUICK FIX TO LIGHTING
void light()
{
	
	DIFFUSE_LIGHT = ALBEDO*LIGHT_COLOR*ATTENUATION*light_intensity;

}"

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )
shader_param/snapRes = 8.0
shader_param/roughness = 1.0
shader_param/specular = 0.1
shader_param/uv_scale = Vector2( 1, 1 )
shader_param/uv_offset = Vector2( 0, 0 )
shader_param/light_intensity = 0.3
shader_param/transparent = false
shader_param/albedoTex = ExtResource( 6 )

[sub_resource type="PlaneMesh" id=7]
material = SubResource( 6 )
size = Vector2( 30, 8 )

[sub_resource type="PlaneMesh" id=8]
size = Vector2( 30, 8 )

[sub_resource type="CubeMesh" id=9]
size = Vector3( 1, 8, 20 )

[node name="RoomLevel2" type="Spatial"]
script = ExtResource( 1 )

[node name="LevelBase" type="Spatial" parent="."]

[node name="Floor" type="CSGMesh" parent="LevelBase"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 7.5, 0, 5.055 )
use_collision = true
mesh = SubResource( 3 )

[node name="Ceiling" type="CSGMesh" parent="LevelBase"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 7.5, 8, 5.055 )
use_collision = true
invert_faces = true
mesh = SubResource( 3 )
material = SubResource( 4 )

[node name="Wall" type="CSGMesh" parent="LevelBase"]
transform = Transform( -1.62921e-07, 1, -4.37114e-08, 0, -4.37114e-08, -1, -1, -1.62921e-07, 7.12149e-15, 22.5, 4, 5 )
use_collision = true
mesh = SubResource( 7 )

[node name="Wall2" type="CSGMesh" parent="LevelBase"]
transform = Transform( -1.62921e-07, 1, -4.37114e-08, 0, -4.37114e-08, -1, -1, -1.62921e-07, 7.12149e-15, -7.5, 4, 5 )
use_collision = true
mesh = SubResource( 7 )

[node name="Wall3" type="CSGMesh" parent="LevelBase"]
transform = Transform( 1, 0, 0, 0, -1.62921e-07, -1, 0, 1, -1.62921e-07, 7.5, 4, -10 )
use_collision = true
mesh = SubResource( 8 )
material = SubResource( 6 )

[node name="Wall4" type="CSGMesh" parent="LevelBase"]
transform = Transform( 1, 0, 0, 0, -1.62921e-07, -1, 0, 1, -1.62921e-07, 7.5, 4, 20 )
use_collision = true
invert_faces = true
mesh = SubResource( 8 )
material = SubResource( 6 )

[node name="BrickWall" type="CSGMesh" parent="LevelBase"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 8.6, 4, 10 )
mesh = SubResource( 9 )
material = SubResource( 6 )

[node name="Doors" type="Spatial" parent="."]

[node name="Door0" parent="Doors" groups=[
"door",
] instance=ExtResource( 4 )]
transform = Transform( -1, 0, -3.25841e-07, 0, 1, 0, 3.25841e-07, 0, -1, -3, 3, 19.9 )
next_Scene = "RoomLevel1"
entrance_Id = 1

[node name="Door1" parent="Doors" groups=[
"door",
"lookable",
] instance=ExtResource( 4 )]
transform = Transform( -1, 0, -3.25841e-07, 0, 1, 0, 3.25841e-07, 0, -1, 16, 3, 19.9 )
this_Id = 1
next_Scene = "RoomLevel3"
knob_Missing = true

[node name="Props" type="Spatial" parent="."]

[node name="WardrobeEmpty2" parent="Props" instance=ExtResource( 10 )]
transform = Transform( -1, 0, -3.25841e-07, 0, 1, 0, 3.25841e-07, 0, -1, 8, 0, 3 )

[node name="Glass" parent="Props/WardrobeEmpty2" instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.7, 1 )

[node name="Glass2" parent="Props/WardrobeEmpty2" instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 9.53674e-07, 3.4, -1 )

[node name="Glass3" parent="Props/WardrobeEmpty2" instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1.7, 0 )

[node name="Glass4" parent="Props/WardrobeEmpty2" instance=ExtResource( 3 )]
transform = Transform( 0.965926, 0.24321, 0.0885213, 0, 0.34202, -0.939693, -0.258819, 0.907673, 0.330366, 0, 0.234566, 0 )

[node name="Knob" parent="Props/WardrobeEmpty2" groups=[
"pickable",
] instance=ExtResource( 12 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1.19, 3.57, 4.92 )

[node name="Table" parent="Props" instance=ExtResource( 7 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, -3, 1, 5 )

[node name="Glass" parent="Props/Table" instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0.9, 1.15, 3 )

[node name="Glass2" parent="Props/Table" instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 1.15, 2 )

[node name="Glass3" parent="Props/Table" instance=ExtResource( 3 )]
transform = Transform( 1, 0, 0, 0, 0.34202, -0.939693, 0, 0.939693, 0.34202, -0.6, 1.2753, -2 )

[node name="Glass4" parent="Props/Table" instance=ExtResource( 3 )]
transform = Transform( 0.34202, 0.939693, 0, -0.939693, 0.34202, 0, 0, 0, 1, -0.6, -0.875, 3 )

[node name="Barrels" type="Spatial" parent="Props"]

[node name="BarrelBroken" parent="Props/Barrels" instance=ExtResource( 8 )]
transform = Transform( 1, 0, 0, 0, -1.62921e-07, -1, 0, 1, -1.62921e-07, 10, 0.85, 6 )

[node name="Barrel2" parent="Props/Barrels" instance=ExtResource( 9 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 11, 0, 4.25 )

[node name="OBstacle" type="Spatial" parent="Props"]

[node name="Table" parent="Props/OBstacle" instance=ExtResource( 7 )]
transform = Transform( 2.65431e-14, -1.62921e-07, 1, -1, -1.62921e-07, 0, 1.62921e-07, -1, -1.62921e-07, 8, 2, -8 )

[node name="OxygenTank" parent="Props/OBstacle" instance=ExtResource( 11 )]
transform = Transform( -1, 3.20891e-07, 5.65817e-08, 0, 0.173648, -0.984808, -3.25841e-07, -0.984808, -0.173648, 7.5, 3.7, -3.5 )

[node name="BarrelBroken" parent="Props/OBstacle" instance=ExtResource( 8 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 8, 2, -7 )

[node name="Barrel2" parent="Props/OBstacle" instance=ExtResource( 9 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 8, 0, -7 )

[node name="WardrobeEmpty" parent="Props/OBstacle" instance=ExtResource( 10 )]
transform = Transform( 0.766044, 0, -0.642788, 0, 1, 0, 0.642788, 0, 0.766044, 7.5, 0, -2 )

[node name="Entities" type="Spatial" parent="."]

[node name="Creature" parent="Entities" instance=ExtResource( 13 )]
transform = Transform( 0.444626, 0, -1.2216, 0, 1.3, 0, 1.2216, 0, 0.444626, -6.68, 0, 17.71 )
visible = false

[node name="Place 1" type="VisibilityNotifier" parent="Entities"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 2.23, 3.2, -3.73 )

[node name="Place 2" type="VisibilityNotifier" parent="Entities"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 13.62, 3.2, -1.22 )
