[gd_scene load_steps=18 format=2]

[ext_resource path="res://Imgs/floor.jpg" type="Texture" id=1]
[ext_resource path="res://Imgs/ceiling.jpg" type="Texture" id=2]
[ext_resource path="res://Scripts/Levels/RoomLevel1.gd" type="Script" id=3]
[ext_resource path="res://Scenes/Entities/Door.tscn" type="PackedScene" id=4]
[ext_resource path="res://Imgs/wall.jpg" type="Texture" id=5]
[ext_resource path="res://Scenes/Props/Outside/Barrel.tscn" type="PackedScene" id=9]
[ext_resource path="res://Scenes/Props/Wardrobes/WardrobeEmpty.tscn" type="PackedScene" id=10]
[ext_resource path="res://Scenes/Props/Wardrobes/WardrobeBooks1.tscn" type="PackedScene" id=12]

[sub_resource type="Shader" id=2]
code = "shader_type spatial; 
render_mode skip_vertex_transform, diffuse_burley; 

//Albedo texture 
uniform sampler2D albedoTex : hint_albedo; //Geometric resolution for vert sna[ 
uniform float snapRes = 8.0; 
uniform float roughness = 1.0;
uniform float specular = 0.1;
uniform vec2 uv_scale = vec2(1.0, 1.0);
uniform vec2 uv_offset = vec2(.0, .0);
//Controls the how much light it recieves
uniform float light_intensity = 0.3;

// For transparent textures
uniform bool transparent = false;

// cull mode disabled

//vec4 for UV recalculation 
varying vec4 vertCoord; 
void vertex() { 
	UV = UV * uv_scale + uv_offset;
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz; 
	VERTEX.xyz = floor(VERTEX.xyz * snapRes) / snapRes; 
	vertCoord = vec4(UV * VERTEX.x, VERTEX.z, 0); 
} 
void fragment() { 
	
	ROUGHNESS =roughness;
	SPECULAR = specular;
	ALBEDO = texture(albedoTex, UV).rgb; 
	
	
	//Check if the texture is transparent
	if (transparent == true){
		// alpha value less than user-specified threshold 0.0?
		if (texture(albedoTex, UV).a <= 0.0)
        
    	{
        	discard; // yes: discard this fragment
    	}	
		
	}
	
	
	}
//QUICK FIX TO LIGHTING
void light()
{
	
	DIFFUSE_LIGHT = ALBEDO*LIGHT_COLOR*ATTENUATION*light_intensity;

}"

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 2 )
shader_param/snapRes = 8.0
shader_param/roughness = 1.0
shader_param/specular = 0.1
shader_param/uv_scale = Vector2( 1, 1 )
shader_param/uv_offset = Vector2( 0, 0 )
shader_param/light_intensity = 0.3
shader_param/transparent = false
shader_param/albedoTex = ExtResource( 1 )

[sub_resource type="PlaneMesh" id=9]
material = SubResource( 5 )
size = Vector2( 15, 30 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 2 )
shader_param/snapRes = 8.0
shader_param/roughness = 1.0
shader_param/specular = 0.1
shader_param/uv_scale = Vector2( 1, 1 )
shader_param/uv_offset = Vector2( 0, 0 )
shader_param/light_intensity = 0.3
shader_param/transparent = false
shader_param/albedoTex = ExtResource( 2 )

[sub_resource type="Shader" id=7]
code = "shader_type spatial; 
render_mode skip_vertex_transform, diffuse_burley, cull_disabled; 

//Albedo texture 
uniform sampler2D albedoTex : hint_albedo; //Geometric resolution for vert sna[ 
uniform float snapRes = 8.0; 
uniform float roughness = 1.0;
uniform float specular = 0.1;
uniform vec2 uv_scale = vec2(1.0, 1.0);
uniform vec2 uv_offset = vec2(.0, .0);
//Controls the how much light it recieves
uniform float light_intensity = 0.3;

// For transparent textures
uniform bool transparent = false;

// cull mode disabled

//vec4 for UV recalculation 
varying vec4 vertCoord; 
void vertex() { 
	UV = UV * uv_scale + uv_offset;
	VERTEX = (MODELVIEW_MATRIX * vec4(VERTEX, 1.0)).xyz; 
	VERTEX.xyz = floor(VERTEX.xyz * snapRes) / snapRes; 
	vertCoord = vec4(UV * VERTEX.x, VERTEX.z, 0); 
} 
void fragment() { 
	
	ROUGHNESS =roughness;
	SPECULAR = specular;
	ALBEDO = texture(albedoTex, UV).rgb; 
	
	
	//Check if the texture is transparent
	if (transparent == true){
		// alpha value less than user-specified threshold 0.0?
		if (texture(albedoTex, UV).a <= 0.0)
        
    	{
        	discard; // yes: discard this fragment
    	}	
		
	}
	
	
	}
//QUICK FIX TO LIGHTING
void light()
{
	
	DIFFUSE_LIGHT = ALBEDO*LIGHT_COLOR*ATTENUATION*light_intensity;

}"

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )
shader_param/snapRes = 8.0
shader_param/roughness = 1.0
shader_param/specular = 0.1
shader_param/uv_scale = Vector2( 1, 1 )
shader_param/uv_offset = Vector2( 0, 0 )
shader_param/light_intensity = 0.3
shader_param/transparent = false
shader_param/albedoTex = ExtResource( 5 )

[sub_resource type="PlaneMesh" id=10]
material = SubResource( 8 )
size = Vector2( 30, 8 )

[sub_resource type="PlaneMesh" id=11]
size = Vector2( 15, 8 )

[sub_resource type="BoxShape" id=12]
extents = Vector3( 2, 2, 4 )

[node name="RoomLevel1" type="Spatial" groups=[
"connect",
]]
script = ExtResource( 3 )

[node name="LevelBase" type="Spatial" parent="."]

[node name="Floor" type="CSGMesh" parent="LevelBase"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 5.05493 )
use_collision = true
mesh = SubResource( 9 )

[node name="Ceiling" type="CSGMesh" parent="LevelBase"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 8, 5.05493 )
use_collision = true
invert_faces = true
mesh = SubResource( 9 )
material = SubResource( 6 )

[node name="Wall" type="CSGMesh" parent="LevelBase"]
transform = Transform( -1.62921e-07, 1, -1.62921e-07, 0, -1.62921e-07, -1, -1, -1.62921e-07, 2.65431e-14, 7.5, 4, 5 )
use_collision = true
mesh = SubResource( 10 )
material = SubResource( 8 )

[node name="Wall2" type="CSGMesh" parent="LevelBase"]
transform = Transform( -1.62921e-07, 1, -4.37114e-08, 0, -4.37114e-08, -1, -1, -1.62921e-07, 7.12149e-15, -7.5, 4, 5 )
use_collision = true
mesh = SubResource( 10 )

[node name="Wall3" type="CSGMesh" parent="LevelBase"]
transform = Transform( 1, 0, 0, 0, -1.62921e-07, -1, 0, 1, -1.62921e-07, 0, 4, -10 )
use_collision = true
mesh = SubResource( 11 )
material = SubResource( 8 )

[node name="Wall4" type="CSGMesh" parent="LevelBase"]
transform = Transform( 1, 0, 0, 0, -1.62921e-07, -1, 0, 1, -1.62921e-07, 0, 4, 20 )
use_collision = true
invert_faces = true
mesh = SubResource( 11 )
material = SubResource( 8 )

[node name="Doors" type="Spatial" parent="."]

[node name="Door0" parent="Doors" groups=[
"door",
] instance=ExtResource( 4 )]
transform = Transform( -1, 0, -3.25841e-07, 0, 1, 0, 3.25841e-07, 0, -1, -3, 3, 20 )
next_Scene = "RoomLevel0"

[node name="Door1" parent="Doors" groups=[
"door",
] instance=ExtResource( 4 )]
transform = Transform( -1.62921e-07, 0, -1, 0, 1, 0, 1, 0, -1.62921e-07, 7.35, 3, 0 )
this_Id = 1
next_Scene = "RoomLevel2"
locked = true

[node name="Props" type="Spatial" parent="."]

[node name="Barrel" parent="Props" instance=ExtResource( 9 )]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 5, 0, 16 )

[node name="WardrobeEmpty" parent="Props" instance=ExtResource( 10 )]
pause_mode = 2
transform = Transform( -0.965925, 0.258819, -1.68683e-07, 1.62921e-07, -4.37114e-08, -1, -0.258819, -0.965925, 5.48219e-11, 5, 2, 2 )

[node name="WardrobeBooks1" parent="Props" instance=ExtResource( 12 )]
transform = Transform( -4.37114e-08, 0, 1, 0, 1, 0, -1, 0, -4.37114e-08, -4, 0, -8.5 )

[node name="Events" type="Spatial" parent="."]

[node name="Unblock" type="Area" parent="Events"]

[node name="ClearDoor" type="CollisionShape" parent="Events/Unblock"]
transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 5, 2, -1 )
shape = SubResource( 12 )
[connection signal="body_entered" from="Events/Unblock" to="." method="_on_Unblock_body_entered"]
